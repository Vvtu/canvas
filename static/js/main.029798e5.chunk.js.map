{"version":3,"sources":["utils/index.ts","canvas/index.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["COLOR","distance","a","b","Math","sqrt","x","y","fixedValue","Number","isInteger","toFixed","roundPointValue","point","p1","round","isChanged","abs","intersectionPoint","line1","line2","e","dx1","p2","dx2","dy1","dy2","a1","b1","c1","a2","b2","c2","i","bb2","Canvas","width","height","canvasRef","useRef","canvasRefBase","timeoutId","useState","isPainting","setIsPainting","point1","setPoint1","point2","setPoint2","toReal","useCallback","fromReal","useEffect","current","clearTimeout","updateLineWithNewCoordinates","event","canvas","coordinate","pageX","offsetLeft","pageY","offsetTop","d1","d2","setTimeout","mouseUp","mouseDown","addEventListener","removeEventListener","canvasBase","contextBase","getContext","strokeStyle","lineWidth","beginPath","lines","max","from","to","moveTo","lineTo","closePath","stroke","from2","to2","context","clearRect","arc","PI","undefined","font","fillStyle","fillText","message","dx","dy","k","className","ref","App","screenSize","setScreenSize","updateSize","rect","getBoundingClientRect","useLayoutEffect","window","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.029798e5.chunk.js","sourcesContent":["export const COLOR = {\n  line: \"red\",\n  base: \"#ddd\",\n  ordinates: \"#000\",\n};\n\nexport type ICoordinate = {\n  x: number;\n  y: number;\n};\n\nexport const distance = (a: ICoordinate, b: ICoordinate) =>\n  Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n\nexport const fixedValue = (x: number) =>\n  Number.isInteger(x) ? x.toFixed(0) : x.toFixed(2);\n\nexport const roundPointValue = (point: ICoordinate) => {\n  const p1 = { ...point };\n  const a = Math.round(p1.x);\n  let isChanged = false;\n  if (Math.abs(a - p1.x) < 0.1) {\n    p1.x = a;\n    isChanged = true;\n  }\n  const b = Math.round(p1.y);\n  if (Math.abs(b - p1.y) < 0.2) {\n    p1.y = b;\n    isChanged = true;\n  }\n  if (isChanged) {\n    return p1;\n  }\n  return point;\n};\n\nexport type ILine = {\n  p1: ICoordinate;\n  p2: ICoordinate;\n};\n\nexport function intersectionPoint(line1: ILine, line2: ILine) {\n  let dx1 = line1.p2.x - line1.p1.x;\n  let dx2 = line2.p2.x - line2.p1.x;\n  let dy1 = line1.p2.y - line1.p1.y;\n  let dy2 = line2.p2.y - line2.p1.y;\n\n  let a1 = dy1;\n  let b1 = -dx1;\n  let c1 = line1.p1.y * dx1 - line1.p1.x * dy1;\n\n  let a2 = dy2;\n  let b2 = -dx2;\n  let c2 = line2.p1.y * dx2 - line2.p1.x * dy2;\n\n  let e;\n  for (let i = 0; i < 2; i += 1) {\n    if (a1 !== 0) {\n      let bb1 = (b1 * a2) / a1;\n      let cc1 = (c1 * a2) / a1;\n      let bb2 = b2 - bb1;\n      if (bb2 !== 0) {\n        let cc2 = c2 - cc1;\n        let y = -cc2 / bb2;\n        let x = (-c1 - b1 * y) / a1;\n        const result = i === 0 ? { x, y } : { x: y, y: x };\n        return result;\n      }\n    }\n    e = a1;\n    a1 = b1;\n    b1 = e;\n    e = a2;\n    a2 = b2;\n    b2 = e;\n  }\n  // --- ПРЯМЫЕ ПАРАЛЕЛЬНЫ ---\n  return {};\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport {\n  COLOR,\n  ICoordinate,\n  distance,\n  fixedValue,\n  roundPointValue,\n  intersectionPoint,\n} from \"../utils\";\ninterface CanvasProps {\n  width: number;\n  height: number;\n}\n\nconst SCALE = 60;\n\nconst Canvas = ({ width, height }: CanvasProps) => {\n  const canvasRef = useRef();\n  const canvasRefBase = useRef();\n  const timeoutId = useRef();\n\n  const [isPainting, setIsPainting] = useState(false);\n\n  const [point1, setPoint1] = useState({ x: -2, y: -2 });\n  const [point2, setPoint2] = useState({ x: 2, y: 2 });\n\n  const toReal = useCallback(\n    ({ x, y }: ICoordinate) => ({\n      x: x * SCALE + width / 2,\n      y: -y * SCALE + height / 2,\n    }),\n    [height, width]\n  );\n  const fromReal = useCallback(\n    ({ x, y }: ICoordinate) => ({\n      x: (x - width / 2) / SCALE,\n      y: -(y - height / 2) / SCALE,\n    }),\n    [height, width]\n  );\n\n  useEffect(() => {\n    return () => {\n      if (timeoutId.current) {\n        clearTimeout(timeoutId.current);\n      }\n    };\n  }, []);\n\n  const updateLineWithNewCoordinates = (\n    event: MouseEvent\n  ): ICoordinate | undefined => {\n    if (!canvasRef.current) {\n      return;\n    }\n    if (isPainting === false) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n\n    const coordinate = fromReal({\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop,\n    });\n    const d1 = distance(coordinate, point1);\n    const d2 = distance(coordinate, point2);\n    if (d1 < d2 && d1 < 1.0) {\n      setPoint1(coordinate);\n    } else {\n      if (d2 < d1 && d2 < 1.0) {\n        setPoint2(coordinate);\n      }\n    }\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current);\n    }\n\n    timeoutId.current = setTimeout(() => {\n      setPoint1(roundPointValue(point1));\n      setPoint2(roundPointValue(point2));\n    }, 300);\n  };\n\n  const mouseUp = () => setIsPainting(false);\n  const mouseDown = () => setIsPainting(true);\n\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    canvas.addEventListener(\"mousedown\", mouseDown);\n    canvas.addEventListener(\"mousemove\", updateLineWithNewCoordinates);\n    canvas.addEventListener(\"mouseup\", mouseUp);\n    canvas.addEventListener(\"touchstart\", mouseDown);\n    canvas.addEventListener(\"touchend\", mouseUp);\n    canvas.addEventListener(\"touchmove\", updateLineWithNewCoordinates);\n\n    return () => {\n      canvas.removeEventListener(\"mousedown\", mouseDown);\n      canvas.removeEventListener(\"mousemove\", updateLineWithNewCoordinates);\n      canvas.removeEventListener(\"mouseup\", mouseUp);\n      canvas.removeEventListener(\"touchstart\", mouseDown);\n      canvas.removeEventListener(\"touchend\", mouseUp);\n      canvas.removeEventListener(\"touchmove\", updateLineWithNewCoordinates);\n    };\n  });\n\n  useEffect(() => {\n    if (!canvasRefBase.current) {\n      return;\n    }\n    const canvasBase: HTMLCanvasElement = canvasRefBase.current;\n    const contextBase = canvasBase.getContext(\"2d\");\n    if (contextBase) {\n      contextBase.strokeStyle = COLOR.base;\n      contextBase.lineWidth = 1;\n\n      contextBase.beginPath();\n\n      const lines = Math.round(\n        Math.max(canvasBase.height, canvasBase.width) / SCALE / 2\n      );\n      for (let x = -lines; x < lines; x += 1) {\n        const from = toReal({ x, y: 0 });\n        const to = toReal({ x, y: 0 });\n        contextBase.moveTo(from.x, 0);\n        contextBase.lineTo(to.x, canvasBase.height);\n      }\n      for (let y = -lines; y < lines; y += 1) {\n        const from = toReal({ x: 0, y });\n        const to = toReal({ x: 0, y });\n        contextBase.moveTo(0, from.y);\n        contextBase.lineTo(canvasBase.width, to.y);\n      }\n      contextBase.closePath();\n      contextBase.stroke();\n\n      contextBase.strokeStyle = COLOR.ordinates;\n      contextBase.lineWidth = 1;\n      contextBase.beginPath();\n      // x\n      const from = toReal({ x: -lines, y: 0 });\n      const to = toReal({ x: lines, y: 0 });\n      contextBase.moveTo(from.x, from.y);\n      contextBase.lineTo(to.x, to.y);\n      // arrow x\n      contextBase.moveTo(canvasBase.width - 15, to.y - 3);\n      contextBase.lineTo(canvasBase.width - 2, to.y);\n      contextBase.moveTo(canvasBase.width - 15, to.y + 3);\n      contextBase.lineTo(canvasBase.width - 2, to.y);\n      // y\n      const from2 = toReal({ x: 0, y: -lines });\n      const to2 = toReal({ x: 0, y: lines });\n      contextBase.moveTo(from2.x, from2.y);\n      contextBase.lineTo(to2.x, to2.y);\n      // arrow y\n      contextBase.moveTo(to2.x - 3, 15);\n      contextBase.lineTo(to2.x, 2);\n      contextBase.moveTo(to2.x + 3, 15);\n      contextBase.lineTo(to2.x, 2);\n      //\n      contextBase.closePath();\n      contextBase.stroke();\n    }\n  }, [toReal]);\n\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    if (context) {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.strokeStyle = COLOR.line;\n      context.lineWidth = 3;\n      context.beginPath();\n\n      const from = toReal(point1);\n      const to = toReal(point2);\n\n      context.moveTo(from.x, from.y);\n      context.arc(from.x, from.y, 3, 0, Math.PI * 2, true);\n      context.moveTo(to.x, to.y);\n      context.arc(to.x, to.y, 3, 0, Math.PI * 2, true);\n\n      let p1 = intersectionPoint(\n        { p1: from, p2: to },\n        { p1: { x: 0, y: 0 }, p2: { x: 0, y: canvas.height } }\n      );\n      let p2 = intersectionPoint(\n        { p1: from, p2: to },\n        {\n          p1: { x: canvas.width, y: 0 },\n          p2: { x: canvas.width, y: canvas.height },\n        }\n      );\n\n      if (p1.x === undefined || p2.x === undefined) {\n        // прямая расположена вертикально\n        p1 = { x: from.x, y: 0 };\n        p2 = { x: from.x, y: canvas.height };\n      }\n\n      context.moveTo(p1.x, p1.y);\n      context.lineTo(p2.x, p2.y);\n\n      context.closePath();\n      context.stroke();\n\n      context.font = \"30px serif\";\n\n      context.fillStyle = \"red\";\n      context.fillText(\n        `(${fixedValue(point1.x)} ; ${fixedValue(point1.y)} )`,\n        from.x + 15,\n        from.y - 5\n      );\n      context.fillText(\n        `(${fixedValue(point2.x)} ; ${fixedValue(point2.y)} )`,\n        to.x + 15,\n        to.y - 5\n      );\n    }\n  }, [point1, point2, toReal]);\n\n  const dx = point2.x - point1.x;\n  const dy = point2.y - point1.y;\n\n  let message;\n  if (dx === 0 && dy === 0) {\n    message = \"точки совпадают\";\n  } else {\n    if (dx === 0) {\n      message = \"k = ∞\";\n    } else {\n      const k = dy / dx;\n      const b = -point1.x * k + point1.y;\n      message = `y = ${fixedValue(k)} * x${\n        b === 0 ? \"\" : ` ${b > 0 ? \"+\" : \"\"} ${fixedValue(b)}`\n      }`;\n    }\n  }\n\n  return (\n    <>\n      <div className=\"message\">{message}</div>\n      <div className=\"fullScreen\">\n        <canvas ref={canvasRefBase} height={height} width={width} />\n      </div>\n      <div className=\"fullScreen\">\n        <canvas ref={canvasRef} height={height} width={width} />\n      </div>\n    </>\n  );\n};\n\nexport default Canvas;\n","import Canvas from \"./canvas\";\nimport \"./App.css\";\n\nimport { useLayoutEffect, useRef, useState } from \"react\";\n\nfunction App() {\n  const ref = useRef<any>();\n  const timeoutId = useRef<any>();\n  const [screenSize, setScreenSize] = useState({ width: 600, height: 600 });\n\n  function updateSize() {\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current);\n    }\n    timeoutId.current = setTimeout(() => {\n      if (ref.current) {\n        const rect = ref.current.getBoundingClientRect();\n        setScreenSize({ width: rect.width, height: rect.height });\n      }\n    }, 200);\n  }\n\n  useLayoutEffect(() => {\n    updateSize();\n    window.addEventListener(\"resize\", updateSize);\n    return () => {\n      window.removeEventListener(\"resize\", updateSize);\n      if (timeoutId.current) {\n        clearTimeout(timeoutId.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App fullScreen\" ref={ref}>\n      <Canvas width={screenSize.width} height={screenSize.height} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}